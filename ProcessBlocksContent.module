<?php

/**
 * Content Blocks Process Module
 * @author Soma <philipp@urlich.ch> 
 * 
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */


class ProcessBlocksContent extends Process implements Module{

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(

            // The module'ss title, typically a little more descriptive than the class name
            'title' => 'Blocks Content',
            'version' => 1,
            'summary' => 'Admin process for content blocks module.',
            'author' => 'Soma',
            'singular' => true,
            'autoload' => false
            );
    }
    
    const pageName = 'blocks-process';
    
    public function init() {
        parent::init();


    }

    public function execute(){
        // nothing yet
    }
    
    /**
     * used on front end editing to refresh block content
     * @return [type] [description]
     */
    public function executeLoadBlock(){
        $page = $this->pages->get($this->input->get->id);
        echo $page->render();
        exit();
    }

    public function executeGetPageTitle(){
        $id = (int) $this->input->get->id;
        if(!$id) throw new WireException("No id specified");
        $page = $this->pages->get($id);
        return $page->title;
    }
    
    public function executeSortBlocks(){
        $id = (int) $this->input->post->id;
        $parent_id = (int) $this->input->post->parent_id;
        $sort = $this->input->post->sort;
        
        $page = $this->pages->get($id);
        $page->pwbc_blocks_select->removeAll();
        foreach(explode(",",$sort) as $block){
            $page->pwbc_blocks_select->append($block);
        }
        $page->save("pwbc_blocks_select");
        
    }

    public function ___install() {

        // create the page our module will be assigned to
        $page           = new Page();
        $page->template = 'admin';
        $page->name     = self::pageName; 

        $page->parent   = $this->pages->get($this->config->adminRootPageID);
        $page->process  = $this;
        $page->status   = Page::statusHidden;

        $info           = self::getModuleInfo();
        $page->title    = $info['title'];
        
        $page->save();
        $this->message("Created Page: {$page->path}"); 
    }
    
    
    public function ___uninstall() {

        // find the page we installed, locating it by the process field (which has the module ID)
        // it would probably be sufficient just to locate by name, but this is just to be extra sure.
        $moduleID = $this->modules->getModuleID($this); 
        $page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName); 

        if($page->id) {
            $path = $page->path;
            $page->delete();
            $this->message("Deleted Page: {$path}");
        }
    }
    

}